diff -Naur mod_log_sql-1.100/AUTHORS mod_log_sql-1.100.patch/AUTHORS
--- mod_log_sql-1.100/AUTHORS	2005-01-11 23:00:10.000000000 +0100
+++ mod_log_sql-1.100.patch/AUTHORS	2009-06-19 10:03:28.000000000 +0200
@@ -9,3 +9,5 @@
 
 The Apache Foundation
 	standard apache logging module for which this module is based on
+
+modified to work with the X-Forwarded-For and mod_vhs HTTP header by Rene Kanzler <rk (at) cosmomill (dot) de>
diff -Naur mod_log_sql-1.100/docs/manual.html mod_log_sql-1.100.patch/docs/manual.html
--- mod_log_sql-1.100/docs/manual.html	2005-01-11 23:21:41.000000000 +0100
+++ mod_log_sql-1.100.patch/docs/manual.html	2009-06-19 10:21:36.000000000 +0200
@@ -31,7 +31,7 @@
   LogSQLWhichHeadersOut Expires Content-Type Cache-Control 
   LogSQLWhichHeadersIn UserAgent Accept-Encoding Host
   (snip)
-&lt;/VirtualHost&gt;</pre></li></ul></div></div><div class="section"><div class="titlepage"><div><h4 class="title"><a name="id2388135"></a>Using the same database for production and test</h4></div></div><p>Although sub-optimal, it is not uncommon to use the same back-end database for the "production" webservers as well as the "test" webservers (budgetary constraints, rack-space limits, etc.). Furthermore, an administrator in this situation may be unable to use LogSQLRemhostIgnore to exclude requests from the test servers -- perhaps the generated entries are genuinely useful for analytical or QA purposes, but their value after analysis is minimal.</p><p>It is wasteful and potentially confusing to permit this internal test data to clutter the database, and a solution to the problem is the proper use of the LogSQLMachineID directive. Assume a scenario where the production webservers have IDs like "web01," "web02," and so on -- and the test webservers have IDs like "test01," "test02," etc. Because entries in the log database are distinguished by their source machine, an administrator may purge unneeded test data from the access log as follows:</p><pre class="programlisting">delete from access_log where machine_id like 'test%';</pre></div><div class="section"><div class="titlepage"><div><h4 class="title"><a name="Sect.DelayedInsert"></a>Optimizing for a busy database</h4></div></div><p>A busy MySQL database will have SELECT statements running concurrently with INSERT and UPDATE statements. A long-running SELECT can in certain circumstances block INSERTs and therefore block mod_log_sql. A workaround is to enable mod_log_sql for "delayed inserts," which are described as follows in the MySQL documentation.</p><p>The DELAYED option for the INSERT statement is a MySQL-specific option that is very useful if you have clients that can't wait for the INSERT to complete. This is a common problem when you use MySQL for logging and you also periodically run SELECT and UPDATE statements that take a long time to complete. DELAYED was introduced in MySQL Version 3.22.15. It is a MySQL extension to ANSI SQL92.</p><p>INSERT DELAYED only works with ISAM and MyISAM tables. Note that as MyISAM tables supports concurrent SELECT and INSERT, if there is no free blocks in the middle of the data file, you very seldom need to use INSERT DELAYED with MyISAM. </p><p>When you use INSERT DELAYED, the client will get an OK at once and the row will be inserted when the table is not in use by any other thread.</p><p>Another major benefit of using INSERT DELAYED is that inserts from many clients are bundled together and written in one block. This is much faster than doing many separate inserts. </p><p>The general disadvantages of delayed inserts are</p><div class="orderedlist"><ol type="1"><li><p>The queued rows are only stored in memory until they are inserted into the table. If mysqld dies unexpectedly, any queued rows that were not written to disk are lost.</p></li><li><p>There is additional overhead for the server to handle a separate thread for each table on which you use INSERT DELAYED.</p></li></ol></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>The MySQL documentation concludes, "This means that you should only use INSERT DELAYED when you are really sure you need it!" Furthermore, the current state of error return from a failed INSERT DELAYED seems to be in flux, and may behave in unpredictable ways between different MySQL versions. See FAQ entry <a href="#FAQ.DelayedInsert" title="Question">Q: 3.4. </a> -- you have been warned.</p></div><p>If you are experiencing issues which could be solved by delayed inserts, then set LogSqlDelayedInserts On in the <tt>httpd.conf</tt>. All regular INSERT statements are now INSERT DELAYED, and you should see no more blocking of the module.</p></div></div><div class="section"><div class="titlepage"><div><h3 class="title"><a name="Sect.ConfigReference"></a>Configuration Directive Reference</h3></div></div><p>It is imperative that you understand which directives are used only once in the main server config, and which are used inside VirtualHost stanzas and therefore multiple times within httpd.conf. The "context" listed with each entry informs you of this.</p><div class="section"><div class="titlepage"><div><h4 class="title"><a name="id2388293"></a>DataBase Configuration</h4></div></div><div class="variablelist"><dl><dt><span class="term">LogSQLLoginInfo</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLLoginInfo</tt>  {<i><tt>connection URI</tt></i>}</p></div><p>Example: LogSQLLoginInfo mysql://logwriter:passw0rd@foobar.baz.com/Apache_log</p><p>Context: main server config</p><p>Defines the basic connection URI to connect to the database with. The format of the connection URI is</p><p>driver://username[:password]@hostname[:port]/database</p><div class="variablelist"><dl><dt><span class="term">driver</span></dt><dd>The database driver to use (mysql, pgsql, etc..)</dd><dt><span class="term">username</span></dt><dd>The database username to login with INSERT privileges on the logging table defined in LogSQLtransferLogTable.</dd><dt><span class="term">password</span></dt><dd>The password to use for username, and can be omitted if there is no password.</dd><dt><span class="term">hostname</span></dt><dd>The hostname or Ip address of the Database machine, ans is simple "localhost" if the database lives on the same machine as Apache.</dd><dt><span class="term">port</span></dt><dd>Port on hostname to connect to the Database, if not specified use the default port for the database.</dd><dt><span class="term">database</span></dt><dd>The database to connect to on the server.</dd></dl></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This is defined only once in the <tt>httpd.conf</tt> file.</p><p>This directive Must be defined for logging to be enabled.</p></div></dd><dt><span class="term">LogSQLDBParam</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLDBParam</tt>  {<i><tt>parameter-name</tt></i>} {<i><tt>value</tt></i>}</p></div><p>Example: LogSQLDBParam socketfile /var/lib/mysql/mysql.socket</p><p>Context: main server config</p><p>This is the new method of specifying Database connection credentials and settings. This is used to define database driver specific options. For a list of options read the documentation for each specific database driver.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>Each parameter-name may only be defined once.</p></div></dd><dt><span class="term">LogSQLCreateTables</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLCreateTables</tt>  {flag}</p></div><p>Example: LogSQLCreateTables On</p><p>Default: Off</p><p>Context: main server config</p><p>mod_log_sql has the ability to create its tables on-the-fly. The advantage to this is convenience: you don't have to execute any SQL by hand to prepare the table. This is especially helpful for people with lots of virtual hosts (who should also see the LogSQLMassVirtualHosting directive).</p><p>There is a slight disadvantage: if you wish to activate this feature, then the userid specified in LogSQLLoginInfo must have CREATE privileges on the database. In an absolutely paranoid, locked-down situation you may only want to grant your mod_log_sql user INSERT privileges on the database; in that situation you are unable to take advantage of LogSQLCreateTables. But most people -- even the very security-conscious -- will find that granting CREATE on the logging database is reasonable.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd><dt><span class="term">LogSQLForcePreserve</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLForcePreserve</tt>  {flag}</p></div><p>Example: LogForcePreserve On</p><p>Default: Off</p><p>Context: main server config</p><p>You may need to perform debugging on your database and specifically want mod_log_sql to make no attempts to log to it. This directive instructs the module to send all its log entries directly to the preserve file and to make no database INSERT attempts.</p><p>This is presumably a directive for temporary use only; it could be dangerous if you set it and forget it, as all your entries will simply pile up in the preserve file.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd><dt><span class="term">LogSQLDisablePreserve</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLDisablePreserve</tt>  {flag}</p></div><p>Example: LogDisablePreserve On</p><p>Default: Off</p><p>Context; main server config</p><p>This option can be enabled to completely disable the preserve file fail back. This may be useful for servers where the file-system is read-only.</p><p>If the database is not available those log entries will be lost.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd><dt><span class="term">LogSQLMachineID</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLMachineID</tt>  {machineID}</p></div><p>Example: LogSQLMachineID web01</p><p>Context: main server config</p><p>If you have a farm of webservers then you may wish to know which particular machine made each entry; this is useful for analyzing your load-balancing methodology. LogSQLMachineID permits you to distinguish each machine's entries if you assign each machine its own LogSQLMachineID: for example, the first webserver gets ``LogSQLMachineID web01,'' the second gets ``LogSQLMachineID web02,'' etc.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd><dt><span class="term">LogSQlPreserveFile</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLPreserveFile</tt>  {<i><tt>filename</tt></i>}</p></div><p>Example: LogSQLPreserveFile offline-preserve</p><p>Default: /tmp/sql-preserve</p><p>Context: virtual host</p><p>mod_log_sql writes queries to this local preserve file in the event that it cannot reach the database, and thus ensures that your high-availability web frontend does not lose logs during a temporary database outage. This could happen for a number of reasons: the database goes offline, the network breaks, etc. You will not lose entries since the module has this backup. The file consists of a series of SQL statements that can be imported into your database at your convenience; furthermore, because the SQL queries contain the access timestamps you do not need to worry about out-of-order data after the import, which is done in a simple manner:</p><pre class="programlisting"># mysql -uadminuser -p mydbname &lt; /tmp/sql-preserve</pre><p>If you do not define LogSQLPreserveFile then all virtual servers will log to the same default preserve file (<tt>/tmp/sql-preserve</tt>). You can redefine this on a virtual-host basis in order to segregate your preserve files if you desire. Note that segregation is not usually necessary, as the SQL statements that are written to the preserve file already distinguish between different virtual hosts if you include the 'v' character in your LogSQLTransferLogFormat directive. It is only necessary to segregate preserve-files by virualhost if you also segregate access logs by virtualhost.</p><p>The module will log to Apache's ErrorLog when it notices a database outage, and upon database return. You will therefore know when the preserve file is being used, although it is your responsibility to import the file.</p><p>The file does not need to be created in advance. It is safe to remove or rename the file without interrupting Apache, as the module closes the filehandle immediately after completing the write. The file is created with the user &amp; group ID of the running Apache process (e.g. 'nobody' on many Linux distributions).</p></dd></dl></div></div><div class="section"><div class="titlepage"><div><h4 class="title"><a name="id2388559"></a>Table Names</h4></div></div><div class="variablelist"><dl><dt><span class="term">LogSQLTransferLogTable</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLTransferLogTable</tt>  {<i><tt>table-name</tt></i>}</p></div><p>Example: LogSQLTransferLogTable access_log_table</p><p>Context: virtual host</p><p>Defines which table is used for logging of Apache's transfers; this is analogous to Apache's TransferLog directive. table-name must be a valid table within the database defined in the LogSQLLoginInfo connection URI.</p><p>This directive is <span class="emphasis"><i>not</i></span> necessary if you declare LogSQLMassVirtualHosting On, since that directive activates dynamically-named tables. If you attempt to use LogSqlTransferlogTable at the same time a warning will be logged and it will be ignored, since LogSQLMassVirtualHosting takes priority.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>Requires unless LogSQLMassVirtualHosting is set to On</p></div></dd><dt><span class="term">LogSQLCookieLogTable</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLCookieLogTable</tt>  {<i><tt></tt></i>table-name}</p></div><p>Example: LogSQLCookieLogTable cookie_log</p><p>Default: cookies</p><p>Context: virtual host</p><p>Defines which table is used for logging of cookies. Working in conjunction with LogSQLWhichCookies, you can log many of each request's associated cookies to a separate table. For meaningful data retrieval the cookie table is keyed to the access table by the unique request ID supplied by the standard Apache module mod_unique_id.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>You must create the table (see create-tables.sql, included in the package), or LogSQLCreateTables must be set to "on".</p></div></dd><dt><span class="term">LogSQLHeadersInLogTable</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLHeadersInLogTable</tt>  {<i><tt>table-name</tt></i>}</p></div><p>Example: LogSQLHeadersInLogTable headers</p><p>Default: headers_in</p><p>Context: virtual host</p><p>Defines which table is used for logging of inbound headers. Working in conjunction with LogSQLWhichHeadersIn, you can log many of each request's associated headers to a separate table. For meaningful data retrieval the headers table is keyed to the access table by the unique request ID supplied by the standard Apache module mod_unique_id.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>Note that you must create the table (see create-tables.sql, included in the package), or LogSQLCreateTables must be set to "on".</p></div></dd><dt><span class="term">LogSQLHeadersOutLogTable</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLHeadersOutLogTable</tt>  {<i><tt>table-name</tt></i>}</p></div><p>Example: LogSQLHeadersOutLogTable headers</p><p>Default: headers_out</p><p>Context: virtual host</p><p>Defines which table is used for logging of outbound headers. Working in conjunction with LogSQLWhichHeadersOut, you can log many of each request's associated headers to a separate table. For meaningful data retrieval the headers table is keyed to the access table by the unique request ID supplied by the standard Apache module mod_unique_id.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>Note that you must create the table (see create-tables.sql, included in the package), or LogSQLCreateTables must be set to "on".</p></div></dd><dt><span class="term">LogSQLNotesLogTable</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLNotesLogTable</tt>  {<i><tt>table-name</tt></i>}</p></div><p>Example: LogSQLNotesLogTable notes-log</p><p>Default: notes</p><p>Context: virtual_host</p><p>Defines which table is used for logging of notes. Working in conjunction with LogSQLWhichNotes, you can log many of each request's associated notes to a separate table. For meaningful data retrieval the notes table is keyed to the access table by the unique request ID supplied by the standard Apache module mod_unique_id.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This table must be created (see create-tables.sql included in the package), or LogSQLCreateTables must be set to 'On'.</p></div></dd><dt><span class="term">LogSQLMassVirtualHosting</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLMassVirtualHosting</tt>  {flag}</p></div><p>Example: LogSQLMassVirtualHosting On</p><p>Default: Off</p><p>Context: main server config</p><p>If you administer a site hosting many, many virtual hosts then this option will appeal to you. If you turn on LogSQLMassVirtualHosting then several things happen:</p><div class="itemizedlist"><ul type="disc"><li><p>the on-the-fly table creation feature is activated automatically</p></li><li><p>the transfer log table name is dynamically set from the virtual host's name after stripping out SQL-unfriendly characters (example: a virtual host www.grubbybaby.com gets logged to table access_www_grubbybaby_com)</p></li><li><p>which, in turn, means that each virtual host logs to its own segregated table. Because there is no data shared between virtual servers you can grant your users access to the tables they need; they will be unable to view others' data.</p></li></ul></div><p>This is a huge boost in convenience for sites with many virtual servers. Activating LogSQLMassVirtualHosting obviates the need to create every virtual server's table and provides more granular security possibilities.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd></dl></div></div><div class="section"><div class="titlepage"><div><h4 class="title"><a name="id2388938"></a>Configuring What Is logged</h4></div></div><div class="variablelist"><dl><dt><a name="Conf.LogSQLTransferLogFormat"></a><span class="term">LogSQLTransferLogFormat </span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLTransferLogFormat</tt>  {<i><tt>format-string</tt></i>}</p></div><p>Example: LogSQLTransferLogFormat huSUTv</p><p>Default: AbHhmRSsTUuv</p><p>Context: virtual host</p><p>Each character in the format-string defines an attribute of the request that you wish to log. The default logs the information required to create Combined Log Format logs, plus several extras. Here is the full list of allowable keys, which sometimes resemble their Apache counterparts, but do not always:</p><div class="table"><p><b>Table 5. Core LogFormat parameters</b></p><table summary="Core LogFormat parameters" border="1"><colgroup><col><col><col><col><col></colgroup><thead><tr><th>Symbol</th><th>Meaning</th><th>DB Field</th><th>Data Type</th><th>Example</th></tr></thead><tbody><tr><td>A</td><td>User Agent</td><td>agent</td><td>varchar(255)</td><td>Mozilla/4.0 (compat; MSIE 6.0; Windows)</td></tr><tr><td>a</td><td>CGi request arguments</td><td>request_args</td><td>varchar(255)</td><td>user=Smith&amp;cart=1231&amp;item=532</td></tr><tr><td>b</td><td>Bytes transfered</td><td>bytes_sent</td><td>int unsigned</td><td>32561</td></tr><tr><td>c<a href="#Foot.LogCookie" title="">???</a></td><td>Text of cookie</td><td>cookie</td><td>varchar(255)</td><td>Apache=sdyn.fooonline.net 1300102700823</td></tr><tr><td>f</td><td>Local filename requested</td><td>request_file</td><td>varchar(255)</td><td>/var/www/html/books-cycroad.html</td></tr><tr><td>H</td><td>HTTP request_protocol</td><td>request_protocol</td><td>varchar(10)</td><td>HTTP/1.1</td></tr><tr><td>h</td><td>Name of remote host</td><td>remote_host</td><td>varchar(50)</td><td>blah.foobar.com</td></tr><tr><td>I</td><td>Request ID (from modd_unique_id)</td><td>id</td><td>char(19)</td><td>POlFcUBRH30AAALdBG8</td></tr><tr><td>l</td><td>Ident user info</td><td>remote_logname</td><td>varcgar(50)</td><td>bobby</td></tr><tr><td>M</td><td>Machine ID<a href="#Foot.MachineID" title="">???</a></td><td>machine_id</td><td>varchar(25)</td><td>web01</td></tr><tr><td>m</td><td>HTTP request method</td><td>request_method</td><td>varchar(10)</td><td>GET</td></tr><tr><td>P</td><td>httpd cchild PID</td><td>child_pid</td><td>smallint unsigned</td><td>3215</td></tr><tr><td>p</td><td>http port</td><td>server_port</td><td>smallint unsigned</td><td>80</td></tr><tr><td>R</td><td>Referer</td><td>referer</td><td>varchar(255)</td><td>http://www.biglinks4u.com/linkpage.html</td></tr><tr><td>r</td><td>Request in full form</td><td>request_line</td><td>varchar(255)</td><td>GET /books-cycroad.html HTTP/1.1</td></tr><tr><td>S</td><td>Time of request in UNIX time_t format</td><td>time_stamp</td><td>int unsigned</td><td>1005598029</td></tr><tr><td>T</td><td>Seconds to service request</td><td>request_duration</td><td>smallint unsigned</td><td>2</td></tr><tr><td>t</td><td>Time of request in human format</td><td>request_time</td><td>char(28)</td><td> [02/Dec/2001:15:01:26 -0800]</td></tr><tr><td>U</td><td>Request in simple form</td><td>request_uri</td><td>varchar(255)</td><td>/books-cycroad.html</td></tr><tr><td>u</td><td>User info from HTTP auth</td><td>remote_user</td><td>varchar(50)</td><td>bobby</td></tr><tr><td>v</td><td>Virtual host servicing the request</td><td>virtual_host</td><td>varchar(255)</td><td>www.foobar.com</td></tr><tr><td>V</td><td>requested Virtual host name (mass virtualhosting)</td><td>virtual_host</td><td>varchar(255)</td><td>www.foobar.org</td></tr></tbody></table></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p><a name="Foot.LogCookie"></a>[1] You must also specify LogSQLWhichCookie for this to take effect.</p><p><a name="Foot.MachineID"></a>[2] You must also specify LogSQLmachineID for this to take effect.</p></div><div class="table"><p><b>Table 6. SSL LogFormat Parameters</b></p><table summary="SSL LogFormat Parameters" border="1"><colgroup><col><col><col><col><col></colgroup><thead><tr><th>Symbol</th><th>Meaning</th><th>DB Field</th><th>Data Type</th><th>Example</th></tr></thead><tbody><tr><td>z</td><td>SSL cipher used</td><td>ssl_cipher</td><td>varchar(25)</td><td>RC4-MD5</td></tr><tr><td>q</td><td>Keysize of the SSL connection</td><td>ssl_keysize</td><td>smallint unsigned</td><td>56</td></tr><tr><td>Q</td><td>maximum keysize supported</td><td>ssl_maxkeysize</td><td>smallint unsigned</td><td>128</td></tr></tbody></table></div></dd><dt><span class="term">LogSQLRemhostIgnore</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLRemhostIgnore</tt>  {<i><tt>hostname</tt></i>...}</p></div><p>Example: LogSQLRemhostIgnore localnet.com</p><p>Context: virtual host</p><p>Lists a series of smortrings that, if present in the REMOTE_HOST, will cause that request to <span class="emphasis"><i>not</i></span> be logged. This directive is useful for cutting down on log clutter when you are certain that you want to ignore requests from certain hosts, such as your own internal network machines. See section <a href="#Sect.Ignore">Instructing the module what NOT to log using filtering directives</a> for some tips for using this directive.</p><p>Each string may contain a + or - prefix in a &lt;VirtualHost&gt; context and will cause those strings to be added (+) or removed (-) from the global configuration. Otherwise the global is completely ignored and overridden if defined in a &lt;VirtualHost&gt;</p><p>Each string is separated by a space, and no regular expressions or globbing are allowed. Each string is evaluated as a substring of the REMOTE_HOST using strstr(). The comparison is case sensitive.</p></dd><dt><span class="term">LogSQLRequestAccept</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLRequestAccept</tt>  {<i><tt>substring</tt></i>...}</p></div><p>Example: LogSQLRequestAccept .html .php .jpg</p><p>Default: if not specified, all requests are 'accepted'</p><p>Context: virtual host</p><p>Lists a series of strings that, if present in the URI, will permit that request to be considered for logging (depending on additional filtering by the "ignore" directives). Any request that fails to match one of the LogSQLRequestAccept entries will be discarded.</p><p>Each string may contain a + or - prefix in a &lt;VirtualHost&gt; context and will cause those strings to be added (+) or removed (-) from the global configuration. Otherwise the global is completely ignored and overridden if defined in a &lt;VirtualHost&gt;</p><p>This directive is useful for cutting down on log clutter when you are certain that you only want to log certain kinds of requests, and just blanket-ignore everything else. See section <a href="#Sect.Ignore">Instructing the module what NOT to log using filtering directives</a> for some tips for using this directive.</p><p>Each string is separated by a space, and no regular expressions or globbing are allowed. Each string is evaluated as a substring of the URI using strstr(). The comparison is case sensitive.</p><p>This directive is completely optional. It is more general than LogSQLRequestIgnore and is evaluated before LogSQLRequestIgnore . If this directive is not used, <span class="emphasis"><i>all</i></span> requests are accepted and passed on to the other filtering directives. Therefore, only use this directive if you have a specific reason to do so.</p></dd><dt><span class="term">LogSQLRequestIgnore</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLRequestIgnore</tt>  {<i><tt>substring</tt></i>...}</p></div><p>Example: LogSQLRequestIgnore root.exe cmd.exe default.ida favicon.ico</p><p>Context: virtual host</p><p>Lists a series of strings that, if present in the URI, will cause that request to <span class="emphasis"><i>NOT</i></span> be logged. This directive is useful for cutting down on log clutter when you are certain that you want to ignore requests for certain objects. See section <a href="#Sect.Ignore">Instructing the module what NOT to log using filtering directives</a> for some tips for using this directive.</p><p>Each string may contain a + or - prefix in a &lt;VirtualHost&gt; context and will cause those strings to be added (+) or removed (-) from the global configuration. Otherwise the global is completely ignored and overridden if defined in a &lt;VirtualHost&gt;</p><p>Each string is separated by a space, and no regular expressions or globbing are allowed. Each string is evaluated as a substring of the URI using strstr(). The comparison is case sensitive.</p></dd><dt><span class="term">LogSQLWhichCookie</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLWhichCookie</tt>  {<i><tt>cookiename</tt></i>}</p></div><p>Example; LogSQLWhichCookie Clicks</p><p>Context: virtual host</p><p>In HTTP, cookies have names to distinguish them from each other. Using mod_usertrack, for example, you can give your user-tracking cookies a name with the CookieName directive.</p><p>mod_log_sql allows you to log cookie information. LogSQL_WhichCookie tells mod_log_sql which cookie to log. This is necessary because you will usually be setting and receiving more than one cookie from a client.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>You must include a 'c' character in LogSQLTransferLogFormat for this directive to take effect.</p><p>although this was origintally intended for people using mod_usertrack to create user-tracking cookies, you are not restricted in any way. You can choose which cookie you wish to log to the database - any cookie at all - and it does not necessarily have to have anything to do with mod_usertrack.</p></div></dd><dt><span class="term">LogSQLWhichCookies</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLWhichCookies</tt>  {<i><tt>cookie-name</tt></i>...}</p></div><p>Example: logSQLWhichCookies userlogin cookie1 cookie2</p><p>Context: virtual host</p><p>Defines the list of cookies you would like logged. This works in conjunction with LogSQLCookieLogTable. This directive does <span class="emphasis"><i>not</i></span> require any additional characters to be added to the LogSQLTransferLogFormat string. The feature is activated simply by including this directive, upon which you will begin populating the separate cookie table with data.</p><p>Each string may contain a + or - prefix in a &lt;VirtualHost&gt; context and will cause those strings to be added (+) or removed (-) from the global configuration. Otherwise the global is completely ignored and overridden if defined in a &lt;VirtualHost&gt;</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>The table must be created (see create-tables.sql, included in the package), or LogSQLCreateTables must be set to 'On'.</p></div></dd><dt><span class="term">LogSQLWhichHeadersIn</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLWhichHeadersIn</tt>  {<i><tt>header-name</tt></i>...}</p></div><p>Example: LogSQLWhichHeadersIn UserAgent Accept-Encodeing Host</p><p>Context: virtual host</p><p>Defines the list of inbound headers you would like logged. This works in conjunction with LogSQLHeadersInLogTable. This directive does not require any additional characters to be added to the LogSQLTransferLogFormat string. The feature is activated simply by including this directive, upon which you will begin populating the separate inbound-headers table with data.</p><p>Each string may contain a + or - prefix in a &lt;VirtualHost&gt; context and will cause those strings to be added (+) or removed (-) from the global configuration. Otherwise the global is completely ignored and overridden if defined in a &lt;VirtualHost&gt;</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>The table must be created (see create-tables.sql, included in the package), or LogSQLCreateTables must be set to 'On'.</p></div></dd><dt><span class="term">LogSQLWhichHeadersOut</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLWhichHeadersOut</tt>  {<i><tt>header-name</tt></i>...}</p></div><p>Example: LogSQLWhichHeadersOut Expires Content-Type Cache-Control</p><p>Context: virtual host</p><p>Defines the list of outbound headers you would like logged. This works in conjunction with LogSQLHeadersOutLogTable. This directive does not require any additional characters to be added to the LogSQLTransferLogFormat string. The feature is activated simply by including this directive, upon which you will begin populating the separate outbound-headers table with data.</p><p>Each string may contain a + or - prefix in a &lt;VirtualHost&gt; context and will cause those strings to be added (+) or removed (-) from the global configuration. Otherwise the global is completely ignored and overridden if defined in a &lt;VirtualHost&gt;</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>The table must be created (see create-tables.sql, included in the package), or LogSQLCreateTables must be set to 'On'.</p></div></dd><dt><span class="term">LogSQLWhichNotes</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLWhichNotes</tt>  {<i><tt>note-name</tt></i>...}</p></div><p>Example: LogSQLWhichNotes mod_gzip_result mod_gzip_ompression_ratio</p><p>Context: virtual host</p><p>Defines the list of notes you would like logged. This works in conjunction with LogSQLNotesLogTable. This directive does not require any additional characters to be added to the LogSQLTransferLogFormat string. The feature is activated simply by including this directive, upon which you will begin populating the separate notes table with data.</p><p>Each string may contain a + or - prefix in a &lt;VirtualHost&gt; context and will cause those strings to be added (+) or removed (-) from the global configuration. Otherwise the global is completely ignored and overridden if defined in a &lt;VirtualHost&gt;</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>The table must be created (see create-tables.sql, included in the package), or LogSQLCreateTables must be set to 'On'.</p></div></dd></dl></div></div><div class="section"><div class="titlepage"><div><h4 class="title"><a name="id2390336"></a>Deprecated Commands</h4></div></div><div class="variablelist"><dl><dt><span class="term">LogSQLSocketFile [Deprecated]</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLSocketFile</tt>  {<i><tt>filename</tt></i>}</p></div><p>Example: LogSQLSocketFile /tmp/mysql.sock</p><p>Default: (database specific)</p><p>Default (MySQL): /var/lib/mysql/mysql.sock</p><p>Context: main server config</p><p>At Apache runtime you can specify the MySQL socket file to use. Set this once in your main server config to override the default value. This value is irrelevant if your database resides on a separate machine.</p><p>mod_log_sql will automatically employ the socket for db communications if the database resides on the local host. If the db resides on a separate host the module will automatically use TCP/IP. This is a function of the MySQL API and is not user-configurable.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This directive is deprecated in favor of LogSQLDBParam socketfile [socketfilename]</p><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd><dt><span class="term">LogSQLTCPPort [Deprecated]</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLTCPPort</tt>  {<i><tt>port-number</tt></i>}</p></div><p>Example: LogSQLTCPPort 3309</p><p>Default: (database specific)</p><p>Default (MySQL): 3306</p><p>Context: main server config</p><p>Your database may listen on a different port than the default. If so, use this directive to instruct the module which port to use. This directive only applies if the database is on a different machine connected via TCP/IP.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This directive is deprecated in favor of LogSQLDBParam tcpport [port-number]</p><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd><dt><span class="term">LogSQLDatabase [Deprecated]</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLDatabase</tt>  {<i><tt>database</tt></i>}</p></div><p>Example: LogSQLDatabase loggingdb</p><p>Context: main server config</p><p>Defines the database that is used for logging. "database" must be a valid db on the MySQL host defined in LogSQLLoginInfo</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This directive is deprecated in favor of the URI form of LogSQLLoginInfo.</p><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd></dl></div></div></div></div><div class="section"><div class="titlepage"><div><h2 class="title" style="clear: both"><a name="Sect.FAQ"></a>FAQ</h2></div></div><div class="qandaset"><dl><dt>1.  <a href="#id2390546">General module questions</a></dt><dd><dl><dt>1.1.  <a href="#id2390557">Why log to an SQL database?</a></dt><dt>1.2.  <a href="#id2391062">Why use MySQL? Are there alternatives?</a></dt><dt>1.3.  <a href="#id2391106">Is this code production-ready?</a></dt><dt>1.4.  <a href="#id2391128">Who's using mod_log_sql?</a></dt><dt>1.5.  <a href="#id2391152">Why doesn't the module also replace the Apache ErrorLog?</a></dt><dt>1.6.  <a href="#id2391192">Does mod_log_sql work with Apache 2.x?</a></dt><dt>1.7.  <a href="#id2391210">Does mod_log_sql connect to MySQL via TCP/IP or a socket?</a></dt><dt>1.8.  <a href="#id2391266">I have discovered a bug. Who can I contact?</a></dt></dl></dd><dt>2.  <a href="#id2391299">Problems</a></dt><dd><dl><dt>2.1.  <a href="#id2391307">Apache segfaults or has other problems when using PHP and mod_log_sql</a></dt><dt>2.2.  <a href="#id2391338">Apache appears to start up fine, but nothing is getting logged in the database</a></dt><dt>2.3.  <a href="#id2391444">Why do I get the message "insufficient configuration info to establish database link" in my Apache error log?</a></dt><dt>2.4.  <a href="#id2391467">My database cannot handle all the open connections from mod_log_sql, is there anything I can do?</a></dt><dt>2.5.  <a href="#id2391544">Why do I occasionally see a "lost connection to MySQL server" message in my Apache error log?</a></dt><dt>2.6.  <a href="#id2391587">Sometimes a single VirtualHost gets logged to two different tables (e.g. access_foo_com, access_www_foo_com). Or, accesses to an unqualified hostname (e.g. "http://intranet/index.html") get logged in separate tables.</a></dt></dl></dd><dt>3.  <a href="#id2391634">Performance and Tuning</a></dt><dd><dl><dt>3.1.  <a href="#id2391642">How well does it perform?</a></dt><dt>3.2.  <a href="#id2391815">Do I need to be worried about all the running MySQL children? Will holding open n Apache-to-MySQL connections consume a lot of memory? </a></dt><dt>3.3.  <a href="#id2391886">My webserver cannot handle all the traffic that my site receives, is there anything I can do?</a></dt><dt>3.4.  <a href="#id2391910">What is the issue with activating delayed inserts?</a></dt></dl></dd><dt>4.  <a href="#id2391992">"How do I...?" -- accomplishing certain tasks</a></dt><dd><dl><dt>4.1.  <a href="#id2392000">How do I extract the data in a format that my analysis tool can understand?</a></dt><dt>4.2.  <a href="#id2392066">How can I log mod_usertrack cookies?</a></dt><dt>4.3.  <a href="#id2392243">What if I want to log more than one cookie? What is the difference between LogSQLWhichCookie and LogSQLWhichCookies?</a></dt><dt>4.4.  <a href="#id2392302">What are the SSL logging features, and how do I activate them?</a></dt></dl></dd></dl><table border="0"><col align="left" width="1%"><tbody><tr class="qandadiv"><td align="left" valign="top" colspan="2"><a name="id2390546"></a><h4 class="title"><a name="id2390546"></a>1.  General module questions</h4></td></tr><tr class="question"><td align="left" valign="top"><a name="FAQ.WhyLogToSQL"></a><a name="id2390557"></a><b>1.1. </b></td><td align="left" valign="top"><p>Why log to an SQL database?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>To begin with, let's get it out of the way: logging to a database is not a panacea. But while there are complexities with this solution, the benefit can be substantial for certain classes of administrator or people with advanced requirements:</p><div class="itemizedlist"><ul type="disc"><li><p>Chores like log rotation go away, as you can DELETE records from the SQL database once they are no longer useful. For example, the excellent and popular log-analysis tool Webalizer (http://www.webalizer.com) does not need historic logs after it has processed them, enabling you to delete older logs.</p></li><li><p>People with clusters of web servers (for high availability) will benefit the most - all their webservers can log to a single SQL database. This obviates the need to collate/interleave the many separate logfiles, which can be / highly/ problematic.</p></li><li><p>People acquainted with the power of SQL SELECT statements will know the flexibility of the extraction possibilities at their fingertips.</p></li></ul></div><p>For example, do you want to see all your 404's? Do this:</p><pre class="programlisting">select remote_host,status,request_uri,bytes_sent,from_unixtime(time_stamp) from acc_log_tbl where status=404 order by time_stamp;</pre><div class="table"><p><b>Table 7. </b></p><table summary="" border="1"><colgroup><col><col><col><col><col></colgroup><thead><tr><th>remote_host</th><th>status</th><th>request_uri</th><th>bytes_sent</th><th>from_unixtime(time_stamp)</th></tr></thead><tbody><tr><td>marge.mmm.co.uk</td><td>404</td><td>/favicon.ico</td><td>321</td><td>2001-11-20 02:30:56</td></tr><tr><td>62.180.239.251</td><td>404</td><td>/favicon.ico</td><td>333</td><td>2001-11-20 02:45:25</td></tr><tr><td>212.234.12.66</td><td>404</td><td>/favicon.ico</td><td>321</td><td>2001-11-20 03:01:00</td></tr><tr><td>212.210.78.254</td><td>404</td><td>/favicon.ico</td><td>333</td><td>2001-11-20 03:26:05</td></tr></tbody></table></div><p>Or do you want to see how many bytes you've sent within a certain directory or site? Do this:</p><pre class="programlisting">select request_uri,sum(bytes_sent) as bytes,count(request_uri) as howmany from acc_log_tbl where request_uri like '%mod_log_sql%' group by request_uri order by howmany desc;</pre><div class="table"><p><b>Table 8. </b></p><table summary="" border="1"><colgroup><col><col><col></colgroup><thead><tr><th>request_uri</th><th>bytes</th><th>howmany</th></tr></thead><tbody><tr><td>/mod_log_sql/style_1.css</td><td>157396 </td><td>1288</td></tr><tr><td>/mod_log_sql/</td><td>2514337</td><td>801</td></tr><tr><td>/mod_log_sql/mod_log_sql.tar.gz</td><td>9769312</td><td>456</td></tr><tr><td>/mod_log_sql/faq.html</td><td>5038728</td><td>436</td></tr></tbody></table></div><p>Or maybe you want to see who's linking to you? Do this:</p><pre class="programlisting">select count(referer) as num,referer from acc_log_tbl where request_uri='/mod_log_sql/' group by referer order by num desc;</pre><div class="table"><p><b>Table 9. </b></p><table summary="" border="1"><colgroup><col><col></colgroup><thead><tr><th>num</th><th>referer</th></tr></thead><tbody><tr><td>271</td><td>http://freshmeat.net/projects/mod_log_sql/</td></tr><tr><td>96</td><td>http://modules.apache.org/search?id=339 </td></tr><tr><td>48</td><td>http://freshmeat.net/</td></tr><tr><td>8</td><td>http://freshmeat.net</td></tr></tbody></table></div><p>As you can see, there are myriad possibilities that can be constructed with the wonderful SQL SELECT statement. Logging to an SQL database can be really quite useful!</p></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391060"></a><a name="id2391062"></a><b>1.2. </b></td><td align="left" valign="top"><p>Why use MySQL? Are there alternatives?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>MySQL is a robust, free, and very powerful production-quality database engine. It is well supported and comes with detailed documentation. Many 3rd-party software pacakges (e.g. Slashcode, the engine that powers Slashdot) run exclusively with MySQL. In other words, you will belong to a very robust and well-supported community by choosing MySQL.</p><p>That being said, there are alternatives. PostgreSQL is probably MySQL's leading "competitor" in the free database world. There is also an excellent module available for Apache to permit logging to a PostgreSQL database, called <a href="http://www.digitalstratum.com/pglogd/" target="_top">pgLOGd</a></p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>Currently a database abstraction system is in the works to allow any database to be used with mod_log_sql.</p></div></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391104"></a><a name="id2391106"></a><b>1.3. </b></td><td align="left" valign="top"><p>Is this code production-ready?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>By all accounts it is. It is known to work without a problem on many-thousands-of-hits-per-day webservers. Does that mean it is 100% bug free? Well, no software is, but it is well-tested and believed to be fully compatible with production environments. (The usual disclaimers apply. This software is provided without warranty of any kind.)</p></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391126"></a><a name="id2391128"></a><b>1.4. </b></td><td align="left" valign="top"><p>Who's using mod_log_sql?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>Good question! It would be great to find out! If you are a production-level mod_log_sql user, please contact eddie at <tt>&lt;<a href="mailto:urkle%20&lt;at&gt;%20outoforder%20&lt;dot&gt;%20cc">urkle &lt;at&gt; outoforder &lt;dot&gt; cc</a>&gt;</tt> so that you can be mentioned here.</p></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391150"></a><a name="id2391152"></a><b>1.5. </b></td><td align="left" valign="top"><p>Why doesn't the module also replace the Apache ErrorLog?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>There are circumstances when that would be quite unwise -- for example, if Apache could not reach the MySQL server for some reason and needed to log that fact. Without a text-based error log you'd never know anything was wrong, because Apache would be trying to log a database connection error to the database... you get the point.</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>Error logs are usually not very high-traffic and are really best left as text files on a web server machine.</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>The Error log is free format text.. (no specified formatting what, so ever) which is rather difficult to nicely format for storing in a database.</p></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391190"></a><a name="id2391192"></a><b>1.6. </b></td><td align="left" valign="top"><p>Does mod_log_sql work with Apache 2.x?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>Yes. A port of mod_log_sql is available for Apache 2.x as of mod_log_sql 1.90</p></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391208"></a><a name="id2391210"></a><b>1.7. </b></td><td align="left" valign="top"><p>Does mod_log_sql connect to MySQL via TCP/IP or a socket?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>Quick answer, Yes.</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>It depends! This is not determined by mod_log_sql. mod_log_sql relies on a connection command that is supplied in the MySQL API, and that command is somewhat intelligent. How it works:</p><div class="itemizedlist"><ul type="disc"><li>if the specified MySQL database is on the same machine, the connection command uses a socket to communicate with MySQL</li><li>if the specified MySQL database is on a different machine, mod_log_sql connects using TCP/IP. </li></ul></div><p>You don't have any control of which methodology is used. You can fine-tune some of the configuration, however. The LogSQLSocketFile runtime configuration directive overrides the default of "/var/lib/mysql/mysql.sock" for socket-based connections, whereas the LogSQLTCPPort command allows to you override the default TCP port of 3306 for TCP/IP connections.</p></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391264"></a><a name="id2391266"></a><b>1.8. </b></td><td align="left" valign="top"><p>I have discovered a bug. Who can I contact?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>Please contact Edward Rudd at <tt>&lt;<a href="mailto:urkle%20&lt;at&gt;%20outoforder%20&lt;dot&gt;%20cc">urkle &lt;at&gt; outoforder &lt;dot&gt; cc</a>&gt;</tt>, or post a message to the mod_log_sql <a href="#Sect.MailingLists">Mailing Lists</a>. Your comments, suggestions, bugfixes, bug catches, and usage testimonials are always welcome. As free software, mod_log_sql is intended to be a community effort -- any code contributions or other ideas will be fully and openly credited, of course.</p></td></tr><tr class="qandadiv"><td align="left" valign="top" colspan="2"><a name="id2391299"></a><h4 class="title"><a name="id2391299"></a>2.  Problems</h4></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391305"></a><a name="id2391307"></a><b>2.1. </b></td><td align="left" valign="top"><p>Apache segfaults or has other problems when using PHP and mod_log_sql</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>This occurs if you compiled PHP with MySQL database support. PHP utilizes its internal, bundled MySQL libraries by default. These conflict with the "real" MySQL libraries linked by mod_log_sql, causing the segmentation fault.</p><p>PHP and mod_log_sql can be configured to happily coexist. The solution is to configure PHP to link against the real MySQL libraries: recompile PHP using --with-mysql=/your/path. Apache will run properly once the modules are all using the same version of the MySQL libraries.</p></td></tr><tr class="question"><td align="left" valign="top"><a name="FAQ.NothingLogged"></a><a name="id2391338"></a><b>2.2. </b></td><td align="left" valign="top"><p>Apache appears to start up fine, but nothing is getting logged in the database</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>If you do not see any entries in the access_log, then something is preventing the inserts from happening. This could be caused by several things:</p><div class="itemizedlist"><ul type="disc"><li>Improper privileges set up in the MySQL database </li><li>You are not hitting a VirtualHost that has a LogSQLTransferLogTable entry </li><li>You did not specify the right database host or login information</li><li>Another factor is preventing a connection to the database</li></ul></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>It is improper to ask for help before you have followed these steps.</p></div><p>First examine the MySQL log that you established in step <a href="#Item.EnableLogging" title="">6</a> of section <a href="#Sect.Preperation">Preparing MySQL for logging</a>. Ensure that the INSERT statements are not being rejected because of a malformed table name or other typographical error. By enabling that log, you instructed MySQL to log every connection and command it receives -- if you see no INSERT attempts in the log, the module isn't successfully connecting to the database. If you see nothing at all in the log -- not even a record of your administrative connection attempts, then you did not enable the log correctly. If you do see INSERT attempts but they are failing, the log should tell you why.</p><p>Second, confirm that your LogSQL* directives are all correct.</p><p>Third, examine the Apache error logs for messages from mod_log_sql; the module will offer hints as to why it cannot connect, etc. </p><p>The next thing to do is to change the LogLevel directive <span class="emphasis"><i>in the main server config as well as in each VirtualHost config:</i></span></p><pre class="programlisting">LogLevel debug
+&lt;/VirtualHost&gt;</pre></li></ul></div></div><div class="section"><div class="titlepage"><div><h4 class="title"><a name="id2388135"></a>Using the same database for production and test</h4></div></div><p>Although sub-optimal, it is not uncommon to use the same back-end database for the "production" webservers as well as the "test" webservers (budgetary constraints, rack-space limits, etc.). Furthermore, an administrator in this situation may be unable to use LogSQLRemhostIgnore to exclude requests from the test servers -- perhaps the generated entries are genuinely useful for analytical or QA purposes, but their value after analysis is minimal.</p><p>It is wasteful and potentially confusing to permit this internal test data to clutter the database, and a solution to the problem is the proper use of the LogSQLMachineID directive. Assume a scenario where the production webservers have IDs like "web01," "web02," and so on -- and the test webservers have IDs like "test01," "test02," etc. Because entries in the log database are distinguished by their source machine, an administrator may purge unneeded test data from the access log as follows:</p><pre class="programlisting">delete from access_log where machine_id like 'test%';</pre></div><div class="section"><div class="titlepage"><div><h4 class="title"><a name="Sect.DelayedInsert"></a>Optimizing for a busy database</h4></div></div><p>A busy MySQL database will have SELECT statements running concurrently with INSERT and UPDATE statements. A long-running SELECT can in certain circumstances block INSERTs and therefore block mod_log_sql. A workaround is to enable mod_log_sql for "delayed inserts," which are described as follows in the MySQL documentation.</p><p>The DELAYED option for the INSERT statement is a MySQL-specific option that is very useful if you have clients that can't wait for the INSERT to complete. This is a common problem when you use MySQL for logging and you also periodically run SELECT and UPDATE statements that take a long time to complete. DELAYED was introduced in MySQL Version 3.22.15. It is a MySQL extension to ANSI SQL92.</p><p>INSERT DELAYED only works with ISAM and MyISAM tables. Note that as MyISAM tables supports concurrent SELECT and INSERT, if there is no free blocks in the middle of the data file, you very seldom need to use INSERT DELAYED with MyISAM. </p><p>When you use INSERT DELAYED, the client will get an OK at once and the row will be inserted when the table is not in use by any other thread.</p><p>Another major benefit of using INSERT DELAYED is that inserts from many clients are bundled together and written in one block. This is much faster than doing many separate inserts. </p><p>The general disadvantages of delayed inserts are</p><div class="orderedlist"><ol type="1"><li><p>The queued rows are only stored in memory until they are inserted into the table. If mysqld dies unexpectedly, any queued rows that were not written to disk are lost.</p></li><li><p>There is additional overhead for the server to handle a separate thread for each table on which you use INSERT DELAYED.</p></li></ol></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>The MySQL documentation concludes, "This means that you should only use INSERT DELAYED when you are really sure you need it!" Furthermore, the current state of error return from a failed INSERT DELAYED seems to be in flux, and may behave in unpredictable ways between different MySQL versions. See FAQ entry <a href="#FAQ.DelayedInsert" title="Question">Q: 3.4. </a> -- you have been warned.</p></div><p>If you are experiencing issues which could be solved by delayed inserts, then set LogSqlDelayedInserts On in the <tt>httpd.conf</tt>. All regular INSERT statements are now INSERT DELAYED, and you should see no more blocking of the module.</p></div></div><div class="section"><div class="titlepage"><div><h3 class="title"><a name="Sect.ConfigReference"></a>Configuration Directive Reference</h3></div></div><p>It is imperative that you understand which directives are used only once in the main server config, and which are used inside VirtualHost stanzas and therefore multiple times within httpd.conf. The "context" listed with each entry informs you of this.</p><div class="section"><div class="titlepage"><div><h4 class="title"><a name="id2388293"></a>DataBase Configuration</h4></div></div><div class="variablelist"><dl><dt><span class="term">LogSQLLoginInfo</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLLoginInfo</tt>  {<i><tt>connection URI</tt></i>}</p></div><p>Example: LogSQLLoginInfo mysql://logwriter:passw0rd@foobar.baz.com/Apache_log</p><p>Context: main server config</p><p>Defines the basic connection URI to connect to the database with. The format of the connection URI is</p><p>driver://username[:password]@hostname[:port]/database</p><div class="variablelist"><dl><dt><span class="term">driver</span></dt><dd>The database driver to use (mysql, pgsql, etc..)</dd><dt><span class="term">username</span></dt><dd>The database username to login with INSERT privileges on the logging table defined in LogSQLtransferLogTable.</dd><dt><span class="term">password</span></dt><dd>The password to use for username, and can be omitted if there is no password.</dd><dt><span class="term">hostname</span></dt><dd>The hostname or Ip address of the Database machine, ans is simple "localhost" if the database lives on the same machine as Apache.</dd><dt><span class="term">port</span></dt><dd>Port on hostname to connect to the Database, if not specified use the default port for the database.</dd><dt><span class="term">database</span></dt><dd>The database to connect to on the server.</dd></dl></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This is defined only once in the <tt>httpd.conf</tt> file.</p><p>This directive Must be defined for logging to be enabled.</p></div></dd><dt><span class="term">LogSQLDBParam</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLDBParam</tt>  {<i><tt>parameter-name</tt></i>} {<i><tt>value</tt></i>}</p></div><p>Example: LogSQLDBParam socketfile /var/lib/mysql/mysql.socket</p><p>Context: main server config</p><p>This is the new method of specifying Database connection credentials and settings. This is used to define database driver specific options. For a list of options read the documentation for each specific database driver.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>Each parameter-name may only be defined once.</p></div></dd><dt><span class="term">LogSQLCreateTables</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLCreateTables</tt>  {flag}</p></div><p>Example: LogSQLCreateTables On</p><p>Default: Off</p><p>Context: main server config</p><p>mod_log_sql has the ability to create its tables on-the-fly. The advantage to this is convenience: you don't have to execute any SQL by hand to prepare the table. This is especially helpful for people with lots of virtual hosts (who should also see the LogSQLMassVirtualHosting directive).</p><p>There is a slight disadvantage: if you wish to activate this feature, then the userid specified in LogSQLLoginInfo must have CREATE privileges on the database. In an absolutely paranoid, locked-down situation you may only want to grant your mod_log_sql user INSERT privileges on the database; in that situation you are unable to take advantage of LogSQLCreateTables. But most people -- even the very security-conscious -- will find that granting CREATE on the logging database is reasonable.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd><dt><span class="term">LogSQLForcePreserve</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLForcePreserve</tt>  {flag}</p></div><p>Example: LogForcePreserve On</p><p>Default: Off</p><p>Context: main server config</p><p>You may need to perform debugging on your database and specifically want mod_log_sql to make no attempts to log to it. This directive instructs the module to send all its log entries directly to the preserve file and to make no database INSERT attempts.</p><p>This is presumably a directive for temporary use only; it could be dangerous if you set it and forget it, as all your entries will simply pile up in the preserve file.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd><dt><span class="term">LogSQLDisablePreserve</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLDisablePreserve</tt>  {flag}</p></div><p>Example: LogDisablePreserve On</p><p>Default: Off</p><p>Context; main server config</p><p>This option can be enabled to completely disable the preserve file fail back. This may be useful for servers where the file-system is read-only.</p><p>If the database is not available those log entries will be lost.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd><dt><span class="term">LogSQLMachineID</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLMachineID</tt>  {machineID}</p></div><p>Example: LogSQLMachineID web01</p><p>Context: main server config</p><p>If you have a farm of webservers then you may wish to know which particular machine made each entry; this is useful for analyzing your load-balancing methodology. LogSQLMachineID permits you to distinguish each machine's entries if you assign each machine its own LogSQLMachineID: for example, the first webserver gets ``LogSQLMachineID web01,'' the second gets ``LogSQLMachineID web02,'' etc.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd><dt><span class="term">LogSQlPreserveFile</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLPreserveFile</tt>  {<i><tt>filename</tt></i>}</p></div><p>Example: LogSQLPreserveFile offline-preserve</p><p>Default: /tmp/sql-preserve</p><p>Context: virtual host</p><p>mod_log_sql writes queries to this local preserve file in the event that it cannot reach the database, and thus ensures that your high-availability web frontend does not lose logs during a temporary database outage. This could happen for a number of reasons: the database goes offline, the network breaks, etc. You will not lose entries since the module has this backup. The file consists of a series of SQL statements that can be imported into your database at your convenience; furthermore, because the SQL queries contain the access timestamps you do not need to worry about out-of-order data after the import, which is done in a simple manner:</p><pre class="programlisting"># mysql -uadminuser -p mydbname &lt; /tmp/sql-preserve</pre><p>If you do not define LogSQLPreserveFile then all virtual servers will log to the same default preserve file (<tt>/tmp/sql-preserve</tt>). You can redefine this on a virtual-host basis in order to segregate your preserve files if you desire. Note that segregation is not usually necessary, as the SQL statements that are written to the preserve file already distinguish between different virtual hosts if you include the 'v' character in your LogSQLTransferLogFormat directive. It is only necessary to segregate preserve-files by virualhost if you also segregate access logs by virtualhost.</p><p>The module will log to Apache's ErrorLog when it notices a database outage, and upon database return. You will therefore know when the preserve file is being used, although it is your responsibility to import the file.</p><p>The file does not need to be created in advance. It is safe to remove or rename the file without interrupting Apache, as the module closes the filehandle immediately after completing the write. The file is created with the user &amp; group ID of the running Apache process (e.g. 'nobody' on many Linux distributions).</p></dd></dl></div></div><div class="section"><div class="titlepage"><div><h4 class="title"><a name="id2388559"></a>Table Names</h4></div></div><div class="variablelist"><dl><dt><span class="term">LogSQLTransferLogTable</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLTransferLogTable</tt>  {<i><tt>table-name</tt></i>}</p></div><p>Example: LogSQLTransferLogTable access_log_table</p><p>Context: virtual host</p><p>Defines which table is used for logging of Apache's transfers; this is analogous to Apache's TransferLog directive. table-name must be a valid table within the database defined in the LogSQLLoginInfo connection URI.</p><p>This directive is <span class="emphasis"><i>not</i></span> necessary if you declare LogSQLMassVirtualHosting On, since that directive activates dynamically-named tables. If you attempt to use LogSqlTransferlogTable at the same time a warning will be logged and it will be ignored, since LogSQLMassVirtualHosting takes priority.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>Requires unless LogSQLMassVirtualHosting is set to On</p></div></dd><dt><span class="term">LogSQLCookieLogTable</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLCookieLogTable</tt>  {<i><tt></tt></i>table-name}</p></div><p>Example: LogSQLCookieLogTable cookie_log</p><p>Default: cookies</p><p>Context: virtual host</p><p>Defines which table is used for logging of cookies. Working in conjunction with LogSQLWhichCookies, you can log many of each request's associated cookies to a separate table. For meaningful data retrieval the cookie table is keyed to the access table by the unique request ID supplied by the standard Apache module mod_unique_id.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>You must create the table (see create-tables.sql, included in the package), or LogSQLCreateTables must be set to "on".</p></div></dd><dt><span class="term">LogSQLHeadersInLogTable</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLHeadersInLogTable</tt>  {<i><tt>table-name</tt></i>}</p></div><p>Example: LogSQLHeadersInLogTable headers</p><p>Default: headers_in</p><p>Context: virtual host</p><p>Defines which table is used for logging of inbound headers. Working in conjunction with LogSQLWhichHeadersIn, you can log many of each request's associated headers to a separate table. For meaningful data retrieval the headers table is keyed to the access table by the unique request ID supplied by the standard Apache module mod_unique_id.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>Note that you must create the table (see create-tables.sql, included in the package), or LogSQLCreateTables must be set to "on".</p></div></dd><dt><span class="term">LogSQLHeadersOutLogTable</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLHeadersOutLogTable</tt>  {<i><tt>table-name</tt></i>}</p></div><p>Example: LogSQLHeadersOutLogTable headers</p><p>Default: headers_out</p><p>Context: virtual host</p><p>Defines which table is used for logging of outbound headers. Working in conjunction with LogSQLWhichHeadersOut, you can log many of each request's associated headers to a separate table. For meaningful data retrieval the headers table is keyed to the access table by the unique request ID supplied by the standard Apache module mod_unique_id.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>Note that you must create the table (see create-tables.sql, included in the package), or LogSQLCreateTables must be set to "on".</p></div></dd><dt><span class="term">LogSQLNotesLogTable</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLNotesLogTable</tt>  {<i><tt>table-name</tt></i>}</p></div><p>Example: LogSQLNotesLogTable notes-log</p><p>Default: notes</p><p>Context: virtual_host</p><p>Defines which table is used for logging of notes. Working in conjunction with LogSQLWhichNotes, you can log many of each request's associated notes to a separate table. For meaningful data retrieval the notes table is keyed to the access table by the unique request ID supplied by the standard Apache module mod_unique_id.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This table must be created (see create-tables.sql included in the package), or LogSQLCreateTables must be set to 'On'.</p></div></dd><dt><span class="term">LogSQLMassVirtualHosting</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLMassVirtualHosting</tt>  {flag}</p></div><p>Example: LogSQLMassVirtualHosting On</p><p>Default: Off</p><p>Context: main server config</p><p>If you administer a site hosting many, many virtual hosts then this option will appeal to you. If you turn on LogSQLMassVirtualHosting then several things happen:</p><div class="itemizedlist"><ul type="disc"><li><p>the on-the-fly table creation feature is activated automatically</p></li><li><p>the transfer log table name is dynamically set from the virtual host's name after stripping out SQL-unfriendly characters (example: a virtual host www.grubbybaby.com gets logged to table access_www_grubbybaby_com)</p></li><li><p>which, in turn, means that each virtual host logs to its own segregated table. Because there is no data shared between virtual servers you can grant your users access to the tables they need; they will be unable to view others' data.</p></li></ul></div><p>This is a huge boost in convenience for sites with many virtual servers. Activating LogSQLMassVirtualHosting obviates the need to create every virtual server's table and provides more granular security possibilities.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd></dl></div></div><div class="section"><div class="titlepage"><div><h4 class="title"><a name="id2388938"></a>Configuring What Is logged</h4></div></div><div class="variablelist"><dl><dt><a name="Conf.LogSQLTransferLogFormat"></a><span class="term">LogSQLTransferLogFormat </span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLTransferLogFormat</tt>  {<i><tt>format-string</tt></i>}</p></div><p>Example: LogSQLTransferLogFormat huSUTv</p><p>Default: AbHhmRSsTUuv</p><p>Context: virtual host</p><p>Each character in the format-string defines an attribute of the request that you wish to log. The default logs the information required to create Combined Log Format logs, plus several extras. Here is the full list of allowable keys, which sometimes resemble their Apache counterparts, but do not always:</p><div class="table"><p><b>Table 5. Core LogFormat parameters</b></p><table summary="Core LogFormat parameters" border="1"><colgroup><col><col><col><col><col></colgroup><thead><tr><th>Symbol</th><th>Meaning</th><th>DB Field</th><th>Data Type</th><th>Example</th></tr></thead><tbody><tr><td>A</td><td>User Agent</td><td>agent</td><td>varchar(255)</td><td>Mozilla/4.0 (compat; MSIE 6.0; Windows)</td></tr><tr><td>a</td><td>CGi request arguments</td><td>request_args</td><td>varchar(255)</td><td>user=Smith&amp;cart=1231&amp;item=532</td></tr><tr><td>b</td><td>Bytes transfered</td><td>bytes_sent</td><td>int unsigned</td><td>32561</td></tr><tr><td>c<a href="#Foot.LogCookie" title="">???</a></td><td>Text of cookie</td><td>cookie</td><td>varchar(255)</td><td>Apache=sdyn.fooonline.net 1300102700823</td></tr><tr><td>f</td><td>Local filename requested</td><td>request_file</td><td>varchar(255)</td><td>/var/www/html/books-cycroad.html</td></tr><tr><td>H</td><td>HTTP request_protocol</td><td>request_protocol</td><td>varchar(10)</td><td>HTTP/1.1</td></tr><tr><td>h</td><td>Name of remote host</td><td>remote_host</td><td>varchar(50)</td><td>blah.foobar.com</td></tr><tr><td>I</td><td>Request ID (from modd_unique_id)</td><td>id</td><td>char(19)</td><td>POlFcUBRH30AAALdBG8</td></tr><tr><td>l</td><td>Ident user info</td><td>remote_logname</td><td>varcgar(50)</td><td>bobby</td></tr><tr><td>M</td><td>Machine ID<a href="#Foot.MachineID" title="">???</a></td><td>machine_id</td><td>varchar(25)</td><td>web01</td></tr><tr><td>m</td><td>HTTP request method</td><td>request_method</td><td>varchar(10)</td><td>GET</td></tr><tr><td>P</td><td>httpd cchild PID</td><td>child_pid</td><td>smallint unsigned</td><td>3215</td></tr><tr><td>p</td><td>http port</td><td>server_port</td><td>smallint unsigned</td><td>80</td></tr><tr><td>R</td><td>Referer</td><td>referer</td><td>varchar(255)</td><td>http://www.biglinks4u.com/linkpage.html</td></tr><tr><td>r</td><td>Request in full form</td><td>request_line</td><td>varchar(255)</td><td>GET /books-cycroad.html HTTP/1.1</td></tr><tr><td>S</td><td>Time of request in UNIX time_t format</td><td>time_stamp</td><td>int unsigned</td><td>1005598029</td></tr><tr><td>T</td><td>Seconds to service request</td><td>request_duration</td><td>smallint unsigned</td><td>2</td></tr><tr><td>t</td><td>Time of request in human format</td><td>request_time</td><td>char(28)</td><td> [02/Dec/2001:15:01:26 -0800]</td></tr><tr><td>U</td><td>Request in simple form</td><td>request_uri</td><td>varchar(255)</td><td>/books-cycroad.html</td></tr><tr><td>u</td><td>User info from HTTP auth</td><td>remote_user</td><td>varchar(50)</td><td>bobby</td></tr><tr><td>v</td><td>Virtual host servicing the request</td><td>virtual_host</td><td>varchar(255)</td><td>www.foobar.com</td></tr><tr><td>V</td><td>requested Virtual host name (mass virtualhosting)</td><td>virtual_host</td><td>varchar(255)</td><td>www.foobar.org</td></tr><tr><td>g</td><td>requested Virtual host name for <a href="http://openvisp.fr/doku/doku.php?id=mod_vhs:logs">mod_vhs</a></td><td>virtual_host</td><td>varchar(255)</td><td>www.foobar.org</td></tr><tr><td>x</td><td>Name of remote host behind a proxy (X-Forwarded-For)</td><td>remote_host</td><td>varchar(50)</td><td>blah.foobar.com</td></tr></tbody></table></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p><a name="Foot.LogCookie"></a>[1] You must also specify LogSQLWhichCookie for this to take effect.</p><p><a name="Foot.MachineID"></a>[2] You must also specify LogSQLmachineID for this to take effect.</p></div><div class="table"><p><b>Table 6. SSL LogFormat Parameters</b></p><table summary="SSL LogFormat Parameters" border="1"><colgroup><col><col><col><col><col></colgroup><thead><tr><th>Symbol</th><th>Meaning</th><th>DB Field</th><th>Data Type</th><th>Example</th></tr></thead><tbody><tr><td>z</td><td>SSL cipher used</td><td>ssl_cipher</td><td>varchar(25)</td><td>RC4-MD5</td></tr><tr><td>q</td><td>Keysize of the SSL connection</td><td>ssl_keysize</td><td>smallint unsigned</td><td>56</td></tr><tr><td>Q</td><td>maximum keysize supported</td><td>ssl_maxkeysize</td><td>smallint unsigned</td><td>128</td></tr></tbody></table></div></dd><dt><span class="term">LogSQLRemhostIgnore</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLRemhostIgnore</tt>  {<i><tt>hostname</tt></i>...}</p></div><p>Example: LogSQLRemhostIgnore localnet.com</p><p>Context: virtual host</p><p>Lists a series of smortrings that, if present in the REMOTE_HOST, will cause that request to <span class="emphasis"><i>not</i></span> be logged. This directive is useful for cutting down on log clutter when you are certain that you want to ignore requests from certain hosts, such as your own internal network machines. See section <a href="#Sect.Ignore">Instructing the module what NOT to log using filtering directives</a> for some tips for using this directive.</p><p>Each string may contain a + or - prefix in a &lt;VirtualHost&gt; context and will cause those strings to be added (+) or removed (-) from the global configuration. Otherwise the global is completely ignored and overridden if defined in a &lt;VirtualHost&gt;</p><p>Each string is separated by a space, and no regular expressions or globbing are allowed. Each string is evaluated as a substring of the REMOTE_HOST using strstr(). The comparison is case sensitive.</p></dd><dt><span class="term">LogSQLRequestAccept</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLRequestAccept</tt>  {<i><tt>substring</tt></i>...}</p></div><p>Example: LogSQLRequestAccept .html .php .jpg</p><p>Default: if not specified, all requests are 'accepted'</p><p>Context: virtual host</p><p>Lists a series of strings that, if present in the URI, will permit that request to be considered for logging (depending on additional filtering by the "ignore" directives). Any request that fails to match one of the LogSQLRequestAccept entries will be discarded.</p><p>Each string may contain a + or - prefix in a &lt;VirtualHost&gt; context and will cause those strings to be added (+) or removed (-) from the global configuration. Otherwise the global is completely ignored and overridden if defined in a &lt;VirtualHost&gt;</p><p>This directive is useful for cutting down on log clutter when you are certain that you only want to log certain kinds of requests, and just blanket-ignore everything else. See section <a href="#Sect.Ignore">Instructing the module what NOT to log using filtering directives</a> for some tips for using this directive.</p><p>Each string is separated by a space, and no regular expressions or globbing are allowed. Each string is evaluated as a substring of the URI using strstr(). The comparison is case sensitive.</p><p>This directive is completely optional. It is more general than LogSQLRequestIgnore and is evaluated before LogSQLRequestIgnore . If this directive is not used, <span class="emphasis"><i>all</i></span> requests are accepted and passed on to the other filtering directives. Therefore, only use this directive if you have a specific reason to do so.</p></dd><dt><span class="term">LogSQLRequestIgnore</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLRequestIgnore</tt>  {<i><tt>substring</tt></i>...}</p></div><p>Example: LogSQLRequestIgnore root.exe cmd.exe default.ida favicon.ico</p><p>Context: virtual host</p><p>Lists a series of strings that, if present in the URI, will cause that request to <span class="emphasis"><i>NOT</i></span> be logged. This directive is useful for cutting down on log clutter when you are certain that you want to ignore requests for certain objects. See section <a href="#Sect.Ignore">Instructing the module what NOT to log using filtering directives</a> for some tips for using this directive.</p><p>Each string may contain a + or - prefix in a &lt;VirtualHost&gt; context and will cause those strings to be added (+) or removed (-) from the global configuration. Otherwise the global is completely ignored and overridden if defined in a &lt;VirtualHost&gt;</p><p>Each string is separated by a space, and no regular expressions or globbing are allowed. Each string is evaluated as a substring of the URI using strstr(). The comparison is case sensitive.</p></dd><dt><span class="term">LogSQLWhichCookie</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLWhichCookie</tt>  {<i><tt>cookiename</tt></i>}</p></div><p>Example; LogSQLWhichCookie Clicks</p><p>Context: virtual host</p><p>In HTTP, cookies have names to distinguish them from each other. Using mod_usertrack, for example, you can give your user-tracking cookies a name with the CookieName directive.</p><p>mod_log_sql allows you to log cookie information. LogSQL_WhichCookie tells mod_log_sql which cookie to log. This is necessary because you will usually be setting and receiving more than one cookie from a client.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>You must include a 'c' character in LogSQLTransferLogFormat for this directive to take effect.</p><p>although this was origintally intended for people using mod_usertrack to create user-tracking cookies, you are not restricted in any way. You can choose which cookie you wish to log to the database - any cookie at all - and it does not necessarily have to have anything to do with mod_usertrack.</p></div></dd><dt><span class="term">LogSQLWhichCookies</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLWhichCookies</tt>  {<i><tt>cookie-name</tt></i>...}</p></div><p>Example: logSQLWhichCookies userlogin cookie1 cookie2</p><p>Context: virtual host</p><p>Defines the list of cookies you would like logged. This works in conjunction with LogSQLCookieLogTable. This directive does <span class="emphasis"><i>not</i></span> require any additional characters to be added to the LogSQLTransferLogFormat string. The feature is activated simply by including this directive, upon which you will begin populating the separate cookie table with data.</p><p>Each string may contain a + or - prefix in a &lt;VirtualHost&gt; context and will cause those strings to be added (+) or removed (-) from the global configuration. Otherwise the global is completely ignored and overridden if defined in a &lt;VirtualHost&gt;</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>The table must be created (see create-tables.sql, included in the package), or LogSQLCreateTables must be set to 'On'.</p></div></dd><dt><span class="term">LogSQLWhichHeadersIn</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLWhichHeadersIn</tt>  {<i><tt>header-name</tt></i>...}</p></div><p>Example: LogSQLWhichHeadersIn UserAgent Accept-Encodeing Host</p><p>Context: virtual host</p><p>Defines the list of inbound headers you would like logged. This works in conjunction with LogSQLHeadersInLogTable. This directive does not require any additional characters to be added to the LogSQLTransferLogFormat string. The feature is activated simply by including this directive, upon which you will begin populating the separate inbound-headers table with data.</p><p>Each string may contain a + or - prefix in a &lt;VirtualHost&gt; context and will cause those strings to be added (+) or removed (-) from the global configuration. Otherwise the global is completely ignored and overridden if defined in a &lt;VirtualHost&gt;</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>The table must be created (see create-tables.sql, included in the package), or LogSQLCreateTables must be set to 'On'.</p></div></dd><dt><span class="term">LogSQLWhichHeadersOut</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLWhichHeadersOut</tt>  {<i><tt>header-name</tt></i>...}</p></div><p>Example: LogSQLWhichHeadersOut Expires Content-Type Cache-Control</p><p>Context: virtual host</p><p>Defines the list of outbound headers you would like logged. This works in conjunction with LogSQLHeadersOutLogTable. This directive does not require any additional characters to be added to the LogSQLTransferLogFormat string. The feature is activated simply by including this directive, upon which you will begin populating the separate outbound-headers table with data.</p><p>Each string may contain a + or - prefix in a &lt;VirtualHost&gt; context and will cause those strings to be added (+) or removed (-) from the global configuration. Otherwise the global is completely ignored and overridden if defined in a &lt;VirtualHost&gt;</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>The table must be created (see create-tables.sql, included in the package), or LogSQLCreateTables must be set to 'On'.</p></div></dd><dt><span class="term">LogSQLWhichNotes</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLWhichNotes</tt>  {<i><tt>note-name</tt></i>...}</p></div><p>Example: LogSQLWhichNotes mod_gzip_result mod_gzip_ompression_ratio</p><p>Context: virtual host</p><p>Defines the list of notes you would like logged. This works in conjunction with LogSQLNotesLogTable. This directive does not require any additional characters to be added to the LogSQLTransferLogFormat string. The feature is activated simply by including this directive, upon which you will begin populating the separate notes table with data.</p><p>Each string may contain a + or - prefix in a &lt;VirtualHost&gt; context and will cause those strings to be added (+) or removed (-) from the global configuration. Otherwise the global is completely ignored and overridden if defined in a &lt;VirtualHost&gt;</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>The table must be created (see create-tables.sql, included in the package), or LogSQLCreateTables must be set to 'On'.</p></div></dd></dl></div></div><div class="section"><div class="titlepage"><div><h4 class="title"><a name="id2390336"></a>Deprecated Commands</h4></div></div><div class="variablelist"><dl><dt><span class="term">LogSQLSocketFile [Deprecated]</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLSocketFile</tt>  {<i><tt>filename</tt></i>}</p></div><p>Example: LogSQLSocketFile /tmp/mysql.sock</p><p>Default: (database specific)</p><p>Default (MySQL): /var/lib/mysql/mysql.sock</p><p>Context: main server config</p><p>At Apache runtime you can specify the MySQL socket file to use. Set this once in your main server config to override the default value. This value is irrelevant if your database resides on a separate machine.</p><p>mod_log_sql will automatically employ the socket for db communications if the database resides on the local host. If the db resides on a separate host the module will automatically use TCP/IP. This is a function of the MySQL API and is not user-configurable.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This directive is deprecated in favor of LogSQLDBParam socketfile [socketfilename]</p><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd><dt><span class="term">LogSQLTCPPort [Deprecated]</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLTCPPort</tt>  {<i><tt>port-number</tt></i>}</p></div><p>Example: LogSQLTCPPort 3309</p><p>Default: (database specific)</p><p>Default (MySQL): 3306</p><p>Context: main server config</p><p>Your database may listen on a different port than the default. If so, use this directive to instruct the module which port to use. This directive only applies if the database is on a different machine connected via TCP/IP.</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This directive is deprecated in favor of LogSQLDBParam tcpport [port-number]</p><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd><dt><span class="term">LogSQLDatabase [Deprecated]</span></dt><dd><div class="cmdsynopsis"><p><tt>LogSQLDatabase</tt>  {<i><tt>database</tt></i>}</p></div><p>Example: LogSQLDatabase loggingdb</p><p>Context: main server config</p><p>Defines the database that is used for logging. "database" must be a valid db on the MySQL host defined in LogSQLLoginInfo</p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>This directive is deprecated in favor of the URI form of LogSQLLoginInfo.</p><p>This is defined only once in the <tt>httpd.conf</tt> file.</p></div></dd></dl></div></div></div></div><div class="section"><div class="titlepage"><div><h2 class="title" style="clear: both"><a name="Sect.FAQ"></a>FAQ</h2></div></div><div class="qandaset"><dl><dt>1.  <a href="#id2390546">General module questions</a></dt><dd><dl><dt>1.1.  <a href="#id2390557">Why log to an SQL database?</a></dt><dt>1.2.  <a href="#id2391062">Why use MySQL? Are there alternatives?</a></dt><dt>1.3.  <a href="#id2391106">Is this code production-ready?</a></dt><dt>1.4.  <a href="#id2391128">Who's using mod_log_sql?</a></dt><dt>1.5.  <a href="#id2391152">Why doesn't the module also replace the Apache ErrorLog?</a></dt><dt>1.6.  <a href="#id2391192">Does mod_log_sql work with Apache 2.x?</a></dt><dt>1.7.  <a href="#id2391210">Does mod_log_sql connect to MySQL via TCP/IP or a socket?</a></dt><dt>1.8.  <a href="#id2391266">I have discovered a bug. Who can I contact?</a></dt></dl></dd><dt>2.  <a href="#id2391299">Problems</a></dt><dd><dl><dt>2.1.  <a href="#id2391307">Apache segfaults or has other problems when using PHP and mod_log_sql</a></dt><dt>2.2.  <a href="#id2391338">Apache appears to start up fine, but nothing is getting logged in the database</a></dt><dt>2.3.  <a href="#id2391444">Why do I get the message "insufficient configuration info to establish database link" in my Apache error log?</a></dt><dt>2.4.  <a href="#id2391467">My database cannot handle all the open connections from mod_log_sql, is there anything I can do?</a></dt><dt>2.5.  <a href="#id2391544">Why do I occasionally see a "lost connection to MySQL server" message in my Apache error log?</a></dt><dt>2.6.  <a href="#id2391587">Sometimes a single VirtualHost gets logged to two different tables (e.g. access_foo_com, access_www_foo_com). Or, accesses to an unqualified hostname (e.g. "http://intranet/index.html") get logged in separate tables.</a></dt></dl></dd><dt>3.  <a href="#id2391634">Performance and Tuning</a></dt><dd><dl><dt>3.1.  <a href="#id2391642">How well does it perform?</a></dt><dt>3.2.  <a href="#id2391815">Do I need to be worried about all the running MySQL children? Will holding open n Apache-to-MySQL connections consume a lot of memory? </a></dt><dt>3.3.  <a href="#id2391886">My webserver cannot handle all the traffic that my site receives, is there anything I can do?</a></dt><dt>3.4.  <a href="#id2391910">What is the issue with activating delayed inserts?</a></dt></dl></dd><dt>4.  <a href="#id2391992">"How do I...?" -- accomplishing certain tasks</a></dt><dd><dl><dt>4.1.  <a href="#id2392000">How do I extract the data in a format that my analysis tool can understand?</a></dt><dt>4.2.  <a href="#id2392066">How can I log mod_usertrack cookies?</a></dt><dt>4.3.  <a href="#id2392243">What if I want to log more than one cookie? What is the difference between LogSQLWhichCookie and LogSQLWhichCookies?</a></dt><dt>4.4.  <a href="#id2392302">What are the SSL logging features, and how do I activate them?</a></dt></dl></dd></dl><table border="0"><col align="left" width="1%"><tbody><tr class="qandadiv"><td align="left" valign="top" colspan="2"><a name="id2390546"></a><h4 class="title"><a name="id2390546"></a>1.  General module questions</h4></td></tr><tr class="question"><td align="left" valign="top"><a name="FAQ.WhyLogToSQL"></a><a name="id2390557"></a><b>1.1. </b></td><td align="left" valign="top"><p>Why log to an SQL database?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>To begin with, let's get it out of the way: logging to a database is not a panacea. But while there are complexities with this solution, the benefit can be substantial for certain classes of administrator or people with advanced requirements:</p><div class="itemizedlist"><ul type="disc"><li><p>Chores like log rotation go away, as you can DELETE records from the SQL database once they are no longer useful. For example, the excellent and popular log-analysis tool Webalizer (http://www.webalizer.com) does not need historic logs after it has processed them, enabling you to delete older logs.</p></li><li><p>People with clusters of web servers (for high availability) will benefit the most - all their webservers can log to a single SQL database. This obviates the need to collate/interleave the many separate logfiles, which can be / highly/ problematic.</p></li><li><p>People acquainted with the power of SQL SELECT statements will know the flexibility of the extraction possibilities at their fingertips.</p></li></ul></div><p>For example, do you want to see all your 404's? Do this:</p><pre class="programlisting">select remote_host,status,request_uri,bytes_sent,from_unixtime(time_stamp) from acc_log_tbl where status=404 order by time_stamp;</pre><div class="table"><p><b>Table 7. </b></p><table summary="" border="1"><colgroup><col><col><col><col><col></colgroup><thead><tr><th>remote_host</th><th>status</th><th>request_uri</th><th>bytes_sent</th><th>from_unixtime(time_stamp)</th></tr></thead><tbody><tr><td>marge.mmm.co.uk</td><td>404</td><td>/favicon.ico</td><td>321</td><td>2001-11-20 02:30:56</td></tr><tr><td>62.180.239.251</td><td>404</td><td>/favicon.ico</td><td>333</td><td>2001-11-20 02:45:25</td></tr><tr><td>212.234.12.66</td><td>404</td><td>/favicon.ico</td><td>321</td><td>2001-11-20 03:01:00</td></tr><tr><td>212.210.78.254</td><td>404</td><td>/favicon.ico</td><td>333</td><td>2001-11-20 03:26:05</td></tr></tbody></table></div><p>Or do you want to see how many bytes you've sent within a certain directory or site? Do this:</p><pre class="programlisting">select request_uri,sum(bytes_sent) as bytes,count(request_uri) as howmany from acc_log_tbl where request_uri like '%mod_log_sql%' group by request_uri order by howmany desc;</pre><div class="table"><p><b>Table 8. </b></p><table summary="" border="1"><colgroup><col><col><col></colgroup><thead><tr><th>request_uri</th><th>bytes</th><th>howmany</th></tr></thead><tbody><tr><td>/mod_log_sql/style_1.css</td><td>157396 </td><td>1288</td></tr><tr><td>/mod_log_sql/</td><td>2514337</td><td>801</td></tr><tr><td>/mod_log_sql/mod_log_sql.tar.gz</td><td>9769312</td><td>456</td></tr><tr><td>/mod_log_sql/faq.html</td><td>5038728</td><td>436</td></tr></tbody></table></div><p>Or maybe you want to see who's linking to you? Do this:</p><pre class="programlisting">select count(referer) as num,referer from acc_log_tbl where request_uri='/mod_log_sql/' group by referer order by num desc;</pre><div class="table"><p><b>Table 9. </b></p><table summary="" border="1"><colgroup><col><col></colgroup><thead><tr><th>num</th><th>referer</th></tr></thead><tbody><tr><td>271</td><td>http://freshmeat.net/projects/mod_log_sql/</td></tr><tr><td>96</td><td>http://modules.apache.org/search?id=339 </td></tr><tr><td>48</td><td>http://freshmeat.net/</td></tr><tr><td>8</td><td>http://freshmeat.net</td></tr></tbody></table></div><p>As you can see, there are myriad possibilities that can be constructed with the wonderful SQL SELECT statement. Logging to an SQL database can be really quite useful!</p></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391060"></a><a name="id2391062"></a><b>1.2. </b></td><td align="left" valign="top"><p>Why use MySQL? Are there alternatives?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>MySQL is a robust, free, and very powerful production-quality database engine. It is well supported and comes with detailed documentation. Many 3rd-party software pacakges (e.g. Slashcode, the engine that powers Slashdot) run exclusively with MySQL. In other words, you will belong to a very robust and well-supported community by choosing MySQL.</p><p>That being said, there are alternatives. PostgreSQL is probably MySQL's leading "competitor" in the free database world. There is also an excellent module available for Apache to permit logging to a PostgreSQL database, called <a href="http://www.digitalstratum.com/pglogd/" target="_top">pgLOGd</a></p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>Currently a database abstraction system is in the works to allow any database to be used with mod_log_sql.</p></div></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391104"></a><a name="id2391106"></a><b>1.3. </b></td><td align="left" valign="top"><p>Is this code production-ready?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>By all accounts it is. It is known to work without a problem on many-thousands-of-hits-per-day webservers. Does that mean it is 100% bug free? Well, no software is, but it is well-tested and believed to be fully compatible with production environments. (The usual disclaimers apply. This software is provided without warranty of any kind.)</p></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391126"></a><a name="id2391128"></a><b>1.4. </b></td><td align="left" valign="top"><p>Who's using mod_log_sql?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>Good question! It would be great to find out! If you are a production-level mod_log_sql user, please contact eddie at <tt>&lt;<a href="mailto:urkle%20&lt;at&gt;%20outoforder%20&lt;dot&gt;%20cc">urkle &lt;at&gt; outoforder &lt;dot&gt; cc</a>&gt;</tt> so that you can be mentioned here.</p></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391150"></a><a name="id2391152"></a><b>1.5. </b></td><td align="left" valign="top"><p>Why doesn't the module also replace the Apache ErrorLog?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>There are circumstances when that would be quite unwise -- for example, if Apache could not reach the MySQL server for some reason and needed to log that fact. Without a text-based error log you'd never know anything was wrong, because Apache would be trying to log a database connection error to the database... you get the point.</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>Error logs are usually not very high-traffic and are really best left as text files on a web server machine.</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>The Error log is free format text.. (no specified formatting what, so ever) which is rather difficult to nicely format for storing in a database.</p></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391190"></a><a name="id2391192"></a><b>1.6. </b></td><td align="left" valign="top"><p>Does mod_log_sql work with Apache 2.x?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>Yes. A port of mod_log_sql is available for Apache 2.x as of mod_log_sql 1.90</p></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391208"></a><a name="id2391210"></a><b>1.7. </b></td><td align="left" valign="top"><p>Does mod_log_sql connect to MySQL via TCP/IP or a socket?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>Quick answer, Yes.</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>It depends! This is not determined by mod_log_sql. mod_log_sql relies on a connection command that is supplied in the MySQL API, and that command is somewhat intelligent. How it works:</p><div class="itemizedlist"><ul type="disc"><li>if the specified MySQL database is on the same machine, the connection command uses a socket to communicate with MySQL</li><li>if the specified MySQL database is on a different machine, mod_log_sql connects using TCP/IP. </li></ul></div><p>You don't have any control of which methodology is used. You can fine-tune some of the configuration, however. The LogSQLSocketFile runtime configuration directive overrides the default of "/var/lib/mysql/mysql.sock" for socket-based connections, whereas the LogSQLTCPPort command allows to you override the default TCP port of 3306 for TCP/IP connections.</p></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391264"></a><a name="id2391266"></a><b>1.8. </b></td><td align="left" valign="top"><p>I have discovered a bug. Who can I contact?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>Please contact Edward Rudd at <tt>&lt;<a href="mailto:urkle%20&lt;at&gt;%20outoforder%20&lt;dot&gt;%20cc">urkle &lt;at&gt; outoforder &lt;dot&gt; cc</a>&gt;</tt>, or post a message to the mod_log_sql <a href="#Sect.MailingLists">Mailing Lists</a>. Your comments, suggestions, bugfixes, bug catches, and usage testimonials are always welcome. As free software, mod_log_sql is intended to be a community effort -- any code contributions or other ideas will be fully and openly credited, of course.</p></td></tr><tr class="qandadiv"><td align="left" valign="top" colspan="2"><a name="id2391299"></a><h4 class="title"><a name="id2391299"></a>2.  Problems</h4></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391305"></a><a name="id2391307"></a><b>2.1. </b></td><td align="left" valign="top"><p>Apache segfaults or has other problems when using PHP and mod_log_sql</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>This occurs if you compiled PHP with MySQL database support. PHP utilizes its internal, bundled MySQL libraries by default. These conflict with the "real" MySQL libraries linked by mod_log_sql, causing the segmentation fault.</p><p>PHP and mod_log_sql can be configured to happily coexist. The solution is to configure PHP to link against the real MySQL libraries: recompile PHP using --with-mysql=/your/path. Apache will run properly once the modules are all using the same version of the MySQL libraries.</p></td></tr><tr class="question"><td align="left" valign="top"><a name="FAQ.NothingLogged"></a><a name="id2391338"></a><b>2.2. </b></td><td align="left" valign="top"><p>Apache appears to start up fine, but nothing is getting logged in the database</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>If you do not see any entries in the access_log, then something is preventing the inserts from happening. This could be caused by several things:</p><div class="itemizedlist"><ul type="disc"><li>Improper privileges set up in the MySQL database </li><li>You are not hitting a VirtualHost that has a LogSQLTransferLogTable entry </li><li>You did not specify the right database host or login information</li><li>Another factor is preventing a connection to the database</li></ul></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>It is improper to ask for help before you have followed these steps.</p></div><p>First examine the MySQL log that you established in step <a href="#Item.EnableLogging" title="">6</a> of section <a href="#Sect.Preperation">Preparing MySQL for logging</a>. Ensure that the INSERT statements are not being rejected because of a malformed table name or other typographical error. By enabling that log, you instructed MySQL to log every connection and command it receives -- if you see no INSERT attempts in the log, the module isn't successfully connecting to the database. If you see nothing at all in the log -- not even a record of your administrative connection attempts, then you did not enable the log correctly. If you do see INSERT attempts but they are failing, the log should tell you why.</p><p>Second, confirm that your LogSQL* directives are all correct.</p><p>Third, examine the Apache error logs for messages from mod_log_sql; the module will offer hints as to why it cannot connect, etc. </p><p>The next thing to do is to change the LogLevel directive <span class="emphasis"><i>in the main server config as well as in each VirtualHost config:</i></span></p><pre class="programlisting">LogLevel debug
 ErrorLog /var/log/httpd/server-messages </pre></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391442"></a><a name="id2391444"></a><b>2.3. </b></td><td align="left" valign="top"><p>Why do I get the message "insufficient configuration info to establish database link" in my Apache error log?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>At a minimum, LogSQLLoginInfo in the URl form and either LogSQLTableName or LogSQLMassVirtualHosting must be defined in order for the module to be able to establish a database link. If these are not defined or are incomplete you will receive this error message.</p></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391465"></a><a name="id2391467"></a><b>2.4. </b></td><td align="left" valign="top"><p>My database cannot handle all the open connections from mod_log_sql, is there anything I can do?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>The rule of thumb: if you have n webservers each configured to support y MaxClients, then your database must be able to handle n times y simultaneous connections in the worst case. Certainly you must use common sense, consider reasonable traffic expectations and structure things accordingly.</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>Tweaking my.cnf to scale to high connection loads is imperative. But if hardware limitations prevent your MySQL server from gracefully handling the number of incoming connections, it would be beneficial to upgrade the memory or CPU on that server in order to handle the load. </p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>Jeremy Zawodny, a highly respected MySQL user and contributor to Linux Magazine, has this very helpful and highly appropriate article on tuning MySQL: <a href="http://jeremy.zawodny.com/blog/archives/000173.html" target="_top">MySQL, Linux, and Thread Caching</a></p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>Please remember that mod_log_sql's overriding principle is performance -- that is what the target audience demands and expects. Other database logging solutions do not open and maintain many database connections, but their performance suffers drastically. For example, pgLOGd funnels all log connections through a separate daemon that connects to the database, but that bottlenecks the entire process. mod_log_sql achieves performance numbers an order of magnitude greater than the alternatives because it dispenses with the overhead associated with rapid connection cycling, and it does not attempt to shoehorn all the database traffic through a single extra daemon or proxy process.</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>Currently connection pooling is being implemented as part of the Database Abstraction layer to allow multiple httpd processes to share connections.</p></div></td></tr><tr class="question"><td align="left" valign="top"><a name="id2391542"></a><a name="id2391544"></a><b>2.5. </b></td><td align="left" valign="top"><p>Why do I occasionally see a "lost connection to MySQL server" message in my Apache error log?</p></td></tr><tr class="answer"><td align="left" valign="top"><b></b></td><td align="left" valign="top"><p>This message may appear every now and then in your Apache error log, especially on very lightly loaded servers. This does not mean that anything is necessarily wrong. Within each httpd child process, mod_log_sql will open (and keep open) a connection to the MySQL server. MySQL, however, will close connections that have not been used in a while; the default timeout is 8 hours. When this occurs, mod_log_sql will notice and re-open the connection. That event is what is being logged, and looks like this:</p><pre class="programlisting">[Tue Nov 12 19:04:10 2002] [error] mod_log_sql: first attempt failed, 
   API said: error 2013, Lost connection to MySQL server during query 
 [Tue Nov 12 19:04:10 2002] [error] mod_log_sql: reconnect successful
diff -Naur mod_log_sql-1.100/functions.h mod_log_sql-1.100.patch/functions.h
--- mod_log_sql-1.100/functions.h	2004-09-20 04:50:46.000000000 +0200
+++ mod_log_sql-1.100.patch/functions.h	2009-06-19 10:48:12.000000000 +0200
@@ -258,4 +258,37 @@
 	  return tempid;
 }
 
+/* The X-Forwarded-For HTTP header is a de facto standard for identifying the originating IP address
+ * of a client connecting to a web server through an HTTP proxy or load balancer. 
+ */
+static const char *extract_forwarded_for(request_rec *r, char *a)
+{
+	const char *val;
+	const char *forwarded_for;
+
+	forwarded_for = apr_table_get(r->headers_in, "X-Forwarded-For");
+	if (forwarded_for != NULL) {
+		/* try to get the farthest downstream client */
+		val = ap_get_token(r->pool, &forwarded_for, 0);
+		return val;
+	}
+
+	/* return the remote IP address if no X-Forwarded-For HTTP header is set */
+	return r->connection->remote_ip;
+}
+
+/* Special HTTP header for mod_vhs read http://openvisp.fr/doku/doku.php?id=mod_vhs:logs  */
+static const char *extract_vhgecos(request_rec *r, char *a)
+{
+	const char *vhgecos;
+
+	vhgecos = apr_table_get(r->subprocess_env, "VH_GECOS");
+	if (vhgecos != NULL) {
+		return vhgecos;
+	}
+
+	/* return the virtual host name if no VH_GECOS HTTP header is set */
+	return r->server->server_hostname;
+}
+
 /* End declarations of various extract_ functions */
diff -Naur mod_log_sql-1.100/mod_log_sql.c mod_log_sql-1.100.patch/mod_log_sql.c
--- mod_log_sql-1.100/mod_log_sql.c	2005-01-11 23:03:41.000000000 +0100
+++ mod_log_sql-1.100.patch/mod_log_sql.c	2009-06-19 10:48:33.000000000 +0200
@@ -483,6 +483,8 @@
     log_sql_register_item(s,p,'U', extract_request_uri,       "request_uri",      1, 1);
     log_sql_register_item(s,p,'v', extract_virtual_host,      "virtual_host",     0, 1);
     log_sql_register_item(s,p,'V', extract_server_name,       "virtual_host",     0, 1);
+    log_sql_register_item(s,p,'x', extract_forwarded_for,     "remote_host",      0, 1);
+    log_sql_register_item(s,p,'g', extract_vhgecos,           "virtual_host",        0, 1);
 
     if (global_config.announce) {
         ap_add_version_component(p, PACKAGE_NAME"/"PACKAGE_VERSION);
